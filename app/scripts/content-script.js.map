{"version":3,"sources":["../scripts.babel/content-script.js"],"names":[],"mappings":";;AACA,IAAI,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;AAClF,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC/B,IAAI,WAAW,GAAG,MAAM,CAAC;;AAEzB,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,wCAAwC,CAAC,CAAC,CAAC;AAC7F,OAAO,CAAC,SAAS,GAAG,UAAS,GAAG,EAAE;AAAE,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CAAE,CAAC;AACxD,OAAO,CAAC,SAAS,GAAG,UAAS,GAAG,EAAE;AAAE,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CAAE,CAAC;AACxD,OAAO,CAAC,MAAM,CAAC,qBAAqB,EAAI,6BAA6B,EAAE,IAAI,CAAC,CAAC;AAC7E,OAAO,CAAC,MAAM,CAAC,qBAAqB,EAAI,6BAA6B,CAAC,CAAC;AACvE,OAAO,CAAC,MAAM,CAAC,sBAAsB,EAAG,6BAA6B,CAAC,CAAC;AACvE,OAAO,CAAC,MAAM,CAAC,uBAAuB,EAAE,6BAA6B,CAAC,CAAC;AACvE,OAAO,CAAC,MAAM,CAAC,sBAAsB,EAAG,6BAA6B,CAAC,CAAC;AACvE,OAAO,CAAC,MAAM,CAAC,yBAAyB,EAAG,6BAA6B,CAAC,CAAC;;AAE1E,UAAU,CAAC,OAAO,CAAC,UAAS,SAAS,EAAE,KAAK,EAAE;AAC1C,QAAI,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC;AACxB,WAAO,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACzB,QAAI,cAAc,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,GAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACtE,QAAI,QAAQ,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AACjC,QAAI,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AACnC,WAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,YAAW;AAC9B,eAAO,CAAC,GAAG,CAAC,GAAG,GAAC,QAAQ,GAAC,GAAG,GAAC,UAAU,EAAE,GAAG,GAAC,QAAQ,GAAC,GAAG,GAAC,WAAW,CAAC,CAAC,IAAI,CAAC,YAAW;AACnF,mBAAO,CAAC,OAAO,CAAC,QAAQ,GAAC,GAAG,GAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAS,QAAQ,EAAE;AAC9D,oBAAI,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC/C,0BAAU,CAAC,EAAE,GAAG,UAAU,CAAC;AAC3B,0BAAU,CAAC,GAAG,GAAG,aAAa,GAAC,WAAW,GAAC,UAAU,GAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC5E,oBAAI,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC;AACvC,2BAAW,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AACnC,2BAAW,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;aACvC,CAAC,CAAC;SACN,CAAC,CAAC;KACN,CAAC,CAAC;CACN,CAAC,CAAC","file":"content-script.js","sourcesContent":["\nvar all_images = Array.prototype.slice.call(document.getElementsByTagName(\"img\"));\nconsole.log(all_images.length);\nvar type_output = \"jpeg\"; // Possible values are gif, png, tiff, jpeg, bmp\n\nvar convert = new Interface(chrome.runtime.getURL('image_magick/scripts/convert-worker.js'));\nconvert.on_stdout = function(txt) { console.log(txt); };\nconvert.on_stderr = function(txt) { console.log(txt); };\nconvert.addUrl('../config/magic.xml',   '/usr/local/etc/ImageMagick/', true);\nconvert.addUrl('../config/coder.xml',   '/usr/local/etc/ImageMagick/');\nconvert.addUrl('../config/policy.xml',  '/usr/local/etc/ImageMagick/');\nconvert.addUrl('../config/english.xml', '/usr/local/etc/ImageMagick/');\nconvert.addUrl('../config/locale.xml',  '/usr/local/etc/ImageMagick/');\nconvert.addUrl('../config/delegates.xml',  '/usr/local/etc/ImageMagick/');\n\nall_images.forEach(function(img_input, index) {\n    var url = img_input.src;\n    convert.addUrl(url, '/');\n    var split_filename = url.substring(url.lastIndexOf('/')+1).split('.');\n    var filename = split_filename[0]; // TODO: verify that there are two elements  \n    var type_input = split_filename[1];\n    convert.allDone().then(function() {\n        convert.run('/'+filename+\".\"+type_input, '/'+filename+\".\"+type_output).then(function() {\n            convert.getFile(filename+\".\"+type_output).then(function(img_data) {\n                var img_output = document.createElement(\"img\");\n                img_output.id = \"received\";\n                img_output.src = \"data:image/\"+type_output+\";base64,\"+window.btoa(img_data);\n                var parent_node = img_input.parentNode;\n                parent_node.removeChild(img_input);\n                parent_node.appendChild(img_output);\n            });\n        });\n    });\n});\n\n"]}